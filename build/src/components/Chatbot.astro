---
---

<div class="chatbot-container">
  <div class="chat-label">Ask me</div>
  <button class="chat-toggle" aria-label="Toggle chat">
    <svg xmlns="http://www.w3.org/2000/svg" class="chat-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"/>
    </svg>
  </button>
  <div class="chat-window hidden">
    <div class="chat-header">
      <h3>Chat with Ricco</h3>
      <button class="close-chat" aria-label="Close chat">&times;</button>
    </div>
    <div class="chat-messages">
      <template id="message-template">
        <div class="message">
          <div class="message-content"></div>
        </div>
      </template>
      
      <div class="message bot">
        <div class="message-content">Hi! I'm Ricco's AI assistant. How can I help you today?</div>
      </div>
    </div>
    <div class="chat-input">
      <input type="text" placeholder="Type your message..." aria-label="Chat message">
      <button class="send-message" aria-label="Send message">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
        </svg>
      </button>
    </div>
  </div>
</div>
  
<script>
// Check if we're in production (deployed) or development (local)
const isProduction = window.location.hostname !== 'localhost';

// Choose the appropriate WebSocket URL and protocol
const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
const baseUrl = isProduction 
  ? 'wss://cvricco.onrender.com/ws'
  : 'ws://localhost:8000/ws';

const WS_URL = `${baseUrl}/${Math.random().toString(36).substring(7)}`;
console.log('WebSocket URL:', WS_URL);

let ws: WebSocket | null = null;

document.addEventListener('DOMContentLoaded', () => {
  const container = document.querySelector('.chatbot-container');
  const toggleBtn = container?.querySelector('.chat-toggle');
  const closeBtn = container?.querySelector('.close-chat');
  const chatWindow = container?.querySelector('.chat-window');
  const input = container?.querySelector('input') as HTMLInputElement;
  const sendBtn = container?.querySelector('.send-message');
  const messagesContainer = container?.querySelector('.chat-messages');

  if (!container || !toggleBtn || !closeBtn || !chatWindow || !input || !sendBtn || !messagesContainer) {
    console.error('Required chat elements not found');
    return;
  }

  function connectWebSocket() {
    if (ws) return;
    
    try {
      console.log('Attempting to connect to WebSocket:', WS_URL);
      ws = new WebSocket(WS_URL);
      
      ws.onopen = () => {
        console.log('WebSocket connected successfully!');
      };

      ws.onmessage = (event) => {
        if (event.data === "typing") {
          const typingMsg = document.createElement('div');
          typingMsg.className = 'message bot typing-message';
          typingMsg.innerHTML = '<div class="message-content">Ricco is typing...</div>';
          messagesContainer.appendChild(typingMsg);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        } else {
          const typingMsg = messagesContainer.querySelector('.typing-message');
          if (typingMsg) typingMsg.remove();
          addMessage(event.data, false);
        }
      };

      ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        addMessage("Error connecting to chat server. Please try again.", false);
      };

      ws.onclose = () => {
        console.log('WebSocket disconnected');
        ws = null;
        // Try to reconnect once on mobile
        if (/Mobi|Android/i.test(navigator.userAgent) && !ws) {
          setTimeout(connectWebSocket, 1000);
        }
      };
    } catch (error) {
      console.error('Error creating WebSocket:', error);
      addMessage("Failed to create WebSocket connection", false);
    }
  }

  function toggleChat() {
    chatWindow?.classList.toggle('hidden');
    if (!chatWindow?.classList.contains('hidden')) {
      connectWebSocket();
      input?.focus();
    }
  }

  function addMessage(content: string, isUser = false) {
    const messagesContainer = document.querySelector('.chat-messages');
    const messageTemplate = document.querySelector<HTMLTemplateElement>('#message-template');
    if (!messagesContainer || !messageTemplate) return;
    
    // Handle typing indicator
    if (content === "typing") {
      const typingDiv = document.createElement('div');
      typingDiv.className = 'message bot typing-indicator';
      typingDiv.innerHTML = `
        <div class="message-content">
          <span class="dot"></span>
          <span class="dot"></span>
          <span class="dot"></span>
        </div>
      `;
      messagesContainer.appendChild(typingDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      return;
    }
    
    // Remove existing typing indicator
    const existingIndicator = messagesContainer.querySelector('.typing-indicator');
    if (existingIndicator) {
      existingIndicator.remove();
    }
    
    // Regular message handling
    const messageElement = messageTemplate.content.cloneNode(true) as HTMLElement;
    const message = messageElement.querySelector('.message');
    const messageContent = messageElement.querySelector('.message-content');
    
    if (message && messageContent) {
      message.classList.add(isUser ? 'user' : 'bot');
      messageContent.textContent = content;
      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }

  function handleSendMessage() {
    const message = input.value.trim();
    if (message) {
      console.log('Sending message:', message);
      addMessage(message, true);
      if (ws?.readyState === WebSocket.OPEN) {
        ws.send(message);
      } else {
        console.error('WebSocket is not connected');
        addMessage("Error: Not connected to server", false);
      }
      input.value = '';
    }
  }

  toggleBtn?.addEventListener('click', toggleChat);
  closeBtn?.addEventListener('click', toggleChat);
  
  sendBtn.addEventListener('click', (e) => {
    e.preventDefault();
    handleSendMessage();
  });

  input.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSendMessage();
    }
  });
});
</script>
  
<style>
  .chatbot-container {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1000;
  }

  .chat-label {
    position: absolute;
    bottom: 100%;
    right: 0;
    margin-bottom: 4px;
    padding: 2px 8px;
    background: linear-gradient(135deg, #4776E6 0%, #8E54E9 100%);
    color: white;
    border-radius: 8px;
    font-size: 12px;
    font-weight: 400;
    opacity: 0.85;
    transition: opacity 0.3s ease;
  }

  .chat-open .chat-label {
    opacity: 0;
  }

  .chat-toggle {
    width: 3.5rem;
    height: 3.5rem;
    border-radius: 50%;
    background: var(--gradient);
    border: none;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: transform 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .chat-toggle:hover {
    transform: scale(1.1);
  }

  .chat-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: white;
  }

  .chat-window {
    position: absolute;
    bottom: 4.5rem;
    right: 0;
    width: 300px;
    height: 400px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
  }

  .chat-window.hidden {
    display: none;
  }

  .chat-header {
    padding: 1rem;
    background: var(--gradient);
    color: white;
    border-radius: 12px 12px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chat-header h3 {
    margin: 0;
    font-size: 1rem;
  }

  .close-chat {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    line-height: 1;
  }

  .chat-messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    background: #ffffff;
    display: flex;
    flex-direction: column;
  }

  .message {
    display: flex;
    margin: 8px 0;
    max-width: 85%;
    width: 100%;
    justify-content: flex-start;
  }

  .message.bot {
    align-self: flex-start;
  }

  .message.user {
    align-self: flex-end;
    justify-content: flex-end;
  }

  .message-content {
    padding: 12px 16px;
    border-radius: 18px;
    font-size: 14px;
    line-height: 1.4;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }

  .bot .message-content {
    background-color: #f0f0f0;
    color: #000000;
    border-bottom-left-radius: 4px;
    margin-right: 32px;
  }

  .user .message-content {
    background-color: #0084ff;
    color: #ffffff;
    border-bottom-right-radius: 4px;
    margin-left: 32px;
  }

  .message + .message {
    margin-top: 0.5rem;
  }

  .chat-input {
    padding: 1rem;
    border-top: 1px solid #eee;
    display: flex;
    gap: 0.5rem;
  }

  .chat-input input {
    flex: 1;
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 1.5rem;
    outline: none;
    font-size: 0.875rem;
    color: #000000;
    background: white;
    font-weight: 400;
  }

  .chat-input input:focus {
    border-color: var(--primary);
  }

  .send-message {
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    background: var(--primary);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease;
  }

  .send-message:hover {
    transform: scale(1.1);
  }

  .send-message svg {
    width: 1rem;
    height: 1rem;
    color: white;
  }

  @media (max-width: 768px) {
    .chatbot-container {
      bottom: 1rem;
      right: 1rem;
    }

    .chat-window {
      width: calc(100vw - 2rem);
      height: calc(100vh - 6rem);
      bottom: 5rem;
      right: -1rem;
    }
  }

  .message *::selection {
    background: rgba(65, 105, 225, 0.2);
    color: inherit !important;
  }

  .typing-indicator {
    margin-bottom: 10px;
  }
  
  .typing-indicator .message-content {
    padding: 8px 16px;
    background-color: #f0f0f0;
    border-radius: 18px;
    border-bottom-left-radius: 4px;
    color: #333333;
  }
  
  .typing-message .message-content {
    background-color: #f0f0f0;
    color: #333333;
    border-bottom-left-radius: 4px;
  }
  
  .typing-indicator .dot {
    display: inline-block;
    width: 8px;
    height: 8px;
    margin-right: 4px;
    background-color: #666666;
    border-radius: 50%;
    animation: bounce 1.4s infinite;
  }
  
  .typing-indicator .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .typing-indicator .dot:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes bounce {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-4px);
    }
  }
</style>